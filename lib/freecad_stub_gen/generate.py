import shutil
import xml.etree.ElementTree as ET
from pathlib import Path

from freecad_stub_gen.config import SOURCE_DIR, GEN_DIR, TARGET_DIR
from freecad_stub_gen.generators.freecad_stub import FreecadStubGenerator
from freecad_stub_gen.module_map import genXmlFiles

pass


#             initPath = targetFile.with_name('__init__.py')
#             genText = f'GENERATOR_UUID={GENERATOR_UUID}'
#             header = f'''"""
# File generated by Freecad stub generator.
# {genText}
# """
# '''
#             with open(initPath, 'a+') as file:
#                 file.seek(0, io.SEEK_SET)
#                 lines = file.readlines()
#                 oldHeader = more_itertools.nth(lines, 2, ())
#                 if genText not in oldHeader:
#                     file.seek(0, io.SEEK_SET)
#                     file.truncate()
#                     file.write(header)
#                 else:
#                     file.seek(0, io.SEEK_END)
#                 file.write(f'import {self._genClassName()}\n')
#
#             dirPath = targetFile.parent
#             assert dirPath.is_relative_to(TARGET_DIR)
#             while dirPath != TARGET_DIR:
#                 initPath = dirPath / '__init__.py'
#                 initPath.touch()
#                 dirPath = dirPath.parent

def prepareStructure(genPath: Path = GEN_DIR, targetPath: Path = TARGET_DIR):
    # TODO App?
    # TODO Gui?
    _prepareStructureForBase(genPath, targetPath)


def _prepareStructureForBase(genPath: Path = GEN_DIR, targetPath: Path = TARGET_DIR):
    """Move base to FreeCAD"""
    basePath = genPath / 'Base'
    fPath = targetPath / 'FreeCAD'
    fPath.mkdir(parents=True, exist_ok=True)
    shutil.move(basePath, fPath)



def generatePythonBase(pythonBaseFile: Path):
    assert 'PyObjectBase' in pythonBaseFile.name
    pythonBase = 'class PyObjectBase(object): ...'
    with open(pythonBaseFile, 'w') as file:
        file.write(pythonBase)


def generateFreeCadStubs(sourcePath=SOURCE_DIR, genPath=GEN_DIR):
    sourcePath = sourcePath.resolve()
    genPath = genPath.resolve()

    for i, xmlPath in enumerate(genXmlFiles(sourcePath)):
        if not (tg := FreecadStubGenerator.safeCreate(xmlPath)):
            continue

        typingPath = genPath / xmlPath.relative_to(sourcePath)
        typingPath = typingPath.with_stem(typingPath.stem.removesuffix('Py')).with_suffix('.pyi')
        try:
            tg.generateToFile(typingPath)
        except ET.ParseError:
            continue

    prepareStructure()

    # (TARGET_DIR / 'App').rename(TARGET_DIR / 'FreeCAD')
    # (TARGET_DIR / 'Gui').rename(TARGET_DIR / 'FreeCADGui')
    # fix error in Placement.pyi
    # TODO fix path after rename? - create separate mechanism
    # Base -> FreeCAD
    # App -> loaded but not in modules
    #
    # TODO preprocess and remove macros
    # https://www.tutorialspoint.com/cplusplus/cpp_preprocessor.htm
    # TODO support kwargs
